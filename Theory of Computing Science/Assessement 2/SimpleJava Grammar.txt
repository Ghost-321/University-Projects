SimpleJava Grammar
In the following grammar, all variable names are surrounded by << and >> (and are in italics) to distinguish them from terminals (keywords, symbols, punctuation, etc.), which have been rendered in markdown terminal font. ε is the empty string as usual. | is the grammar "or". For this restricted subset of Java, we'll only use || for logical or, so if you see |, it's part of the grammar, not Java.

Each of the variables should have a matching name in the Label enum in the TreeNode class. Similarly, each terminal should have a matching name in the TokenType enum in the Token class. Due to the limitations of what can be written as an ID in an enum in Java, you may have to do some (simple) translation between the grammar and the code. In particular, many of the terminals (but not all) will use the terminal label to label their leaf.

Note also that we only have a limited set of variable types: int, char and boolean - there's no double or float (or any of the others).

This grammar has also already been left factored and had left-recursion removed.

<<prog>> → public class <<ID>> { public static void main ( String[] args ) { <<los>> } } 

<<los>> → <<stat>> <<los>> | ε

<<stat>> → <<while>> | <<for>> | <<if>> | <<assign>> ; | <<decl>> ; | <<print>> ; | ;

<<while>> → while ( <<rel expr>> <<bool expr>> ) { <<los>> } 

<<for>> → for ( <<for start>> ; <<rel expr>> <<bool expr>> ; <<for arith>> ) { <<los>> } 

<<for start>> → <<decl>> | <<assign>> | ε

<<for arith>> → <<arith expr>> | ε

<<if>> → if ( <<rel expr>> <<bool expr>> ) { <<los>> } <<else if>>

<<else if>> → <<else?if>> { <<los>> } <<else if>> | ε

<<else?if>> → else <<poss if>>

<<poss if>> → if ( <<rel expr>> <<bool expr>> ) | ε

<<assign>> → <<ID>> = <<expr>>

<<decl>> → <<type>> <<ID>> <<poss assign>>

<<poss assign>> → = <<expr>> | ε

<<print>> → System.out.println ( <<print expr>> )

<<type>> → int | boolean | char

<<expr>> → <<rel expr>> <<bool expr>> | <<char expr>>

<<char expr>> → ' <<char>> ' 

<<bool expr>> → <<bool op>> <<rel expr>> <<bool expr>> | ε

<<bool op>> → <<bool eq>> | <<bool log>>

<<bool eq>> → == | != 

<<bool log>> → && | ||

<<rel expr>> → <<arith expr>> <<rel expr'>> | true | false

<<rel expr'>> → <<rel op>> <<arith expr>> | ε

<<rel op>> → < | <= | > | >=

<<arith expr>> → <<term>> <<arith expr'>>

<<arith expr'>> → + <<term>> <<arith expr'>> | - <<term>> <<arith expr'>> | ε

<<term>> → <<factor>> <<term'>>

<<term'>> → * <<factor>> <<term'>> | / <<factor>> <<term'>> | % <<factor>> <<term'>> | ε

<<factor>> → ( <<arith expr>> ) | <<ID>> | <<num>>

<<print expr>> → <<rel expr>> <<bool expr>> | "<<string lit>> "

In addition (and to save confusing EBNF):

<<ID>> is a variable name, has to start with an alphabetic character, and may not include whitespace, any of the operators, any open or close braces/parenthesis/brackets, and must also be different to any of the keywords (main, if, while, for, else public, static, void, int, char, boolean, etc. etc.). Note that if you want a functional Java program, the list of restrictions is the same as for Java.

<<num>> is any integer

<<char>> is just a char literal

<<string lit>> is a string literal
