Two Sum
Two Sum is a classic Leet Code problem.  It is rated easy and is on the Blind 75 list of problems.  This is a great problem to showcase the usefulness of a hash table.  In this problem you will implement the function twoSum with the signature.

std::pair<int, int> twoSum(const std::vector<int>& vec, int target);
You are given a vector of integers vec and another integer called target.  You are promised that there are indices 
ùëñ
‚â†
ùëó
i
ÓÄ†
=j such that target == vec.at(i) + vec.at(j) .  Moreover, you are promised that there is exactly one such pair of indices.  The goal is to output this pair of indices.  Your program can output any pair of indices (for example {0, 0}) if it does not find a valid solution.

Let's look at some examples:

if vec = {1, 2, 4, 8} and target = 5 then return the pair {0, 2} (or {2, 0}) because vec[0] + vec[2] = 5.

if vec = {1, 3, 9, 27} and target = 30 then return the pair {1, 3} (or {3, 1}) because vec[1] + vec[3] = 30.

if vec = {-1, 36, -10, 18} and target = 26 then return the pair {1, 2} (or {2, 1}) because vec[1] + v[2] = 26.

As usual, implement your solution in two_sum.cpp.  You are free to play with main.cpp.

Pair
std::pair is a lightweight class to hold two objects defined in the utility library.  The two objects can be of different types.  We specify the types of the two objects with template arguments, and for a std::pair example we can refer to the first and second items by example.first and example.second, like so:

123456789101112
#include <iostream>
#include <utility>
#include <string>

int main() {
    // make a pair
    std::pair<std::string, int> example {"Hello", 5};
    // refer to first and second items
    std::cout << "first item is " << example.first << '\n';
    std::cout << "second item is " << example.second << '\n';

Once you find the right indices i and j in your twoSum function you can simply say 

return {i, j};
The compiler will correctly interpret this since it knows the return type of the function.
