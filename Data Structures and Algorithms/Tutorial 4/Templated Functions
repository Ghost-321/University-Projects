#include <gtest/gtest.h>
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include <string>

template <typename T>
void swap(T& a, T& b) {
  T temp = a;
  a = b;
  b = temp;
}

template <typename T>
T square(const T& a) {
  return a*a;
}

template <typename Iter>
void print(const Iter& begin, const Iter& end) {
  for (Iter it = begin; it != end; ++it) {
    std::cout << *it << ' ';
  }
  std::cout << '\n';
}

TEST(square, squareAnInt) {
  EXPECT_EQ(square<int>(3), 9);
}

TEST(square, squareANegativeInt) {
  EXPECT_EQ(square<int>(-3), 9);
}

TEST(square, squareAFloat) {
  EXPECT_FLOAT_EQ(square<float>(1.6f), 2.56f);
}

TEST(square, squareADouble) {
  EXPECT_DOUBLE_EQ(square<double>(2.5), 6.25);
}

TEST(swap, swapTwoInts) {
  int x = 3;
  int y = 5;
  swap<int>(x,y);
  EXPECT_EQ(x, 5);
  EXPECT_EQ(y, 3);
}

TEST(swap, swapTwoFloats) {
  float x = 3.0;
  float y = 5.0;
  swap<float>(x,y);
  EXPECT_FLOAT_EQ(x, 5.0);
  EXPECT_FLOAT_EQ(y, 3.0);
}

TEST(swap, swapTwoVectors) {
  std::vector<int> vec1 {1, 2, 3, 4, 5};
  std::vector<int> vec2 {6, 7, 8};
  swap(vec1, vec2);
  EXPECT_EQ(vec1, (std::vector<int> {6,7,8}));
  EXPECT_EQ(vec2, (std::vector<int> {1, 2, 3, 4, 5}));
}

int main(int argc, char* argv[]) {
  ::testing::InitGoogleTest(&argc, argv);
  std::string s {"Hello World"};
  print(s.begin(), s.end());
  return RUN_ALL_TESTS();
  return 0;
}
